{"version":3,"names":[],"mappings":"","sources":["ssi-uploader.js"],"sourcesContent":["\n(function (root, factory) {\n    //@author http://ifandelse.com/its-not-hard-making-your-library-support-amd-and-commonjs/\n    if (typeof module === \"object\" && module.exports) {\n        module.exports = factory(require(\"jquery\"));\n    } else {\n        factory(root.jQuery);\n    }\n}(this, function ($) {\n    var Ssi_upload = function (element, options) {\n        this.options = options;\n        this.$element = '';\n        this.language = locale[this.options.locale];\n        this.uploadList = [];\n        this.totalProgress = [];\n        this.toUpload = [];\n        this.imgNames = [];\n        this.totalFilesLength = 0;\n        this.successfulUpload = 0;\n        this.aborted = 0;\n        this.abortedWithError = 0;\n        this.pending = 0;\n        this.inProgress = 0;\n        this.currentListLength = 0;\n        this.inputName = '';\n        this.init(element);\n    };\n    Ssi_upload.prototype.init = function (element) {\n        $(element).addClass('ssi-uploadInput')\n            .after(this.$element = $('<div class=\"ssi-uploader\">'));\n        var $chooseBtn = $('' +\n            '<span class=\"ssi-InputLabel\">' +\n            '<button class=\"ssi-button success\">' + this.language.chooseFiles + '</button>' +\n            '</span>').append(element);\n        var $uploadBtn = $('<button id=\"ssi-uploadBtn\" class=\"ssi-button success ssi-hidden\" >' +\n            '<span class=\"ssi-btnIn\">' + this.language.upload + '&nbsp;</span>' +\n            '<div id=\"ssi-up_loading\" class=\"ssi-btnIn\"></div></button>');\n        var $clearBtn = $('<button id=\"ssi-clearBtn\" class=\"ssi-hidden ssi-button info\" >' + this.language.clear +\n            '</button>');\n        var $abortBtn = $('<button id=\"ssi-abortBtn\" class=\"ssi-button error ssi-cancelAll ssi-hidden\" ><span class=\"inBtn\">' + this.language.abort + ' </span></button>');\n        if (this.options.inForm) {\n            $uploadBtn.hide();\n        }\n        this.$element.append($('<div class=\"ssi-buttonWrapper\">').append($chooseBtn, $abortBtn, $uploadBtn, $clearBtn));\n        var $uploadBox;\n        if (!this.options.preview) {\n            this.$element.addClass('ssi-uploaderNP');\n            var $fileList = $('<table id=\"ssi-fileList\" class=\"ssi-fileList\"></table>');\n            var $namePreview = $('<span class=\"ssi-namePreview\"></span>');\n            var $mainBox = $('<div id=\"ssi-uploadFiles\" class=\"ssi-tooltip ssi-uploadFiles ' + (this.options.dropZone ? 'ssi-dropZone' : '') + '\"><div id=\"ssi-uploadProgressNoPreview\" class=\"ssi-uploadProgressNoPreview\"></div></div>')\n                .append($namePreview);\n            var $uploadDetails = $('<div class=\"ssi-uploadDetails\"></div>').append($fileList);\n            $uploadBox = $('<div class=\"ssi-uploadBoxWrapper ssi-uploadBox\"></div>').append($mainBox, $uploadDetails);\n            this.$element.prepend($uploadBox);\n        } else {\n            $uploadBox = $('<div id=\"ssi-previewBox\" class=\"ssi-uploadBox ssi-previewBox ' + (this.options.dropZone ? 'ssi-dropZonePreview ssi-dropZone' : '') + '\"><div id=\"ssi-info\">' + (this.options.dropZone ? '<div id=\"ssi-DropZoneBack\">' + this.language.drag + '</div>' : '') + '<div id=\"ssi-fileNumber\" class=\"ssi-hidden\">?</div></div></div>');\n            this.$element.append($uploadBox);\n        }\n        var thisS = this;\n        var $input = $chooseBtn.find(\".ssi-uploadInput\");\n        this.inputName = $input.attr('name') || 'files';\n        $chooseBtn.find('button').click(function (e) {\n            e.preventDefault();\n            $input.trigger('click');\n        });\n        $input.on('change', function () { //choose files\n            thisS.toUploadFiles(this.files);\n            if (!thisS.options.inForm) {\n                $input.val('');\n            }\n        });\n        //drag n drop\n        if (thisS.options.dropZone) {\n            $uploadBox.on(\"drop\", function (e) {\n                e.preventDefault();\n                $uploadBox.removeClass(\"ssi-dragOver\");\n                var files = e.originalEvent.dataTransfer.files;\n                thisS.toUploadFiles(files);\n            });\n            $uploadBox.on(\"dragover\", function (e) {\n                e.preventDefault();\n                $uploadBox.addClass(\"ssi-dragOver\");\n                return false;\n            });\n            $uploadBox.on(\"dragleave\", function (e) {\n                e.preventDefault();\n                $uploadBox.removeClass(\"ssi-dragOver\");\n                return false;\n            });\n        }\n\n        if (!thisS.options.preview) {\n            $mainBox.click(function () {\n                if (thisS.currentListLength > 1)\n                    $uploadDetails.toggleClass('ssi-uploadBoxOpened');\n            })\n        }\n\n        $clearBtn.click(function (e) { //choose files completed and pending files\n            e.preventDefault();\n            thisS.clear();\n        });\n\n        $uploadBox.on('mouseenter', '.ssi-statusLabel', function (e) {\n            var $eventTarget = $(e.currentTarget);\n            var title = $eventTarget.attr('data-status');\n            if (!title || title === '') {\n                return;\n            }\n            tooltip($eventTarget, title, thisS);\n        });\n        $uploadBox.on('mouseenter', '#ssi-fileNumber', function (e) {\n            var $eventTarget = $(e.currentTarget);\n\n            var message = \" \" + thisS.language.pending + \": \" + thisS.pending + \" <br> \" + thisS.language.completed + \": \" + (thisS.successfulUpload + thisS.aborted + thisS.abortedWithError) + \"<br> \" + thisS.language.inProgress + \": \" + thisS.inProgress;\n            tooltip($eventTarget, message, thisS);\n        });\n\n        $uploadBox.on('click', '.ssi-removeBtn', function (e) { //remove the file from list\n            e.preventDefault();\n            var $currentTarget = $(e.currentTarget);\n            var index = $currentTarget.data('delete'); //get file's index\n            thisS.pending--; //reduce pending number by 1\n            thisS.currentListLength--; //reduce current list length by 1\n            if (thisS.pending < 1) {\n                thisS.$element.find('#ssi-fileNumber').addClass('ssi-hidden');\n            }\n            if (thisS.pending === 0) {\n                $uploadBtn.prop('disabled', true); //if there is no more files disable upload button\n            }\n            if (thisS.options.preview) { //if preview is true\n                $currentTarget.parents('table.ssi-imgToUploadTable').remove(); //remove table\n            } else {\n                var target = $currentTarget.parents('tr.ssi-toUploadTr'); //find the tr of file\n                $namePreview.html((thisS.currentListLength) + ' files'); //set the main name to the remaining files\n                target.prev().remove();// remove empty tr (using id for margin between rows)\n                target.remove();// remove the file\n                if (thisS.currentListLength === 1) { //if only one file left in the list\n                    setLastElementName(thisS); //set main preview to display the name\n                }\n            }\n            thisS.toUpload[index] = null; //set the file's obj to null (we don't splice it because we need to keep the same indexes)\n            thisS.imgNames[index] = null; //set the file's name to null\n\n            if (thisS.currentListLength === 0) { // if no more files in the list\n                if (!thisS.options.dropZone) { // if drag and drop is disabled\n                    $uploadBox.removeClass('ssi-uploadNoDropZone');\n                }\n                $clearBtn.addClass('ssi-hidden');\n                $uploadBtn.addClass('ssi-hidden');\n            }\n        });\n        $uploadBox.on('click', '.ssi-abortUpload', function (e) {//abort one element\n            e.preventDefault();\n            var $eventTarget = $(e.currentTarget);\n            var index = $eventTarget.data('delete');// get the element id\n            thisS.abort(index); // abort request\n        });\n        //----------------------------UPLOADFILES------------------------------------\n        $uploadBtn.click(function (e) {// upload the files\n            e.preventDefault();\n            thisS.uploadFiles();\n        });\n        $abortBtn.click(function (e) { // abort all requests\n            e.preventDefault();\n            thisS.abortAll();\n        });\n\n    };\n    function tooltip($target, text, thisS) {\n        $target = $($target);\n        text = text || $target.data('title');\n        if (!text) text = $target.attr('title');\n        if (!text) return;\n        var $toolTip = $('<div class=\"ssi-fadeOut ssi-fade ssi-tooltipText\">'\n            + text +\n            '</div>').appendTo(thisS.$element);\n        $target.one('mouseleave', function () {\n            $toolTip.remove();\n        });\n        var offset = -16;\n        if ($target.hasClass('ssi-noPreviewSubMessage')) {\n            offset = 23;\n        }\n        $toolTip.css({\n            top: $target.position().top - $toolTip.height() + offset,\n            left: $target.position().left - $toolTip.width() / 2\n        })\n            .removeClass('ssi-fadeOut');\n        return $toolTip;\n    }\n\n    Ssi_upload.prototype.abortAll = function () {\n        for (var i = 0; i < this.uploadList.length; i++) { //all element in the list\n            if (typeof this.uploadList[i] === 'object') {// check if not deleted\n                this.abort(i);\n            }\n        }\n    };\n    Ssi_upload.prototype.toUploadFiles = function (files) {\n        if (typeof this.options.maxNumberOfFiles === 'number') {\n            if ((this.inProgress + this.pending) >= this.options.maxNumberOfFiles) {// if in progress files + pending files are more than the number that we have define as max number of files pre download\n                return;//don't do anything\n            }\n        }\n        var thisS = this,\n            j = 0,\n            length,\n            imgContent = '',\n            $uploadBtn = this.$element.find('#ssi-uploadBtn'),\n            $clearBtn = this.$element.find('#ssi-clearBtn'),\n            $fileList = this.$element.find('#ssi-fileList'),\n            $uploadBox = this.$element.find('.ssi-uploadBox'),\n            imgs = [];\n        if ((this.inProgress === 0 && this.pending === 0)) { //if no file are pending or are in progress\n            this.clear(); //clear the list\n        }\n        var extErrors = [], sizeErrors = [], errorMessage = '';\n        var toUploadLength, filesLength = length = toUploadLength = files.length;\n        if (typeof this.options.maxNumberOfFiles === 'number') {//check if requested files agree with our arguments\n            if (filesLength > this.options.maxNumberOfFiles - (this.inProgress + this.pending)) { //if requested files is more than we need\n                filesLength = toUploadLength = this.options.maxNumberOfFiles - (this.inProgress + this.pending); // set variable to the number of files we need\n            }\n        }\n        //\n        for (var i = 0; i < filesLength; i++) {\n            var file = files[i],\n                ext = file.name.getExtension();// get file's extension\n\n            if ($.inArray(ext, this.options.allowed) === -1) { // if requested file not allowed\n                if (length > filesLength) {//there are more file we dont pick\n                    filesLength++;//the add 1 more loop\n                } else {\n                    toUploadLength--;\n                }\n                if ($.inArray(ext, extErrors) === -1) {//if we see first time this extension\n                    extErrors.push(ext); //push it to extErrors variable\n                }\n            } else if ((file.size * Math.pow(10, -6)).toFixed(2) > this.options.maxFileSize) {//if file size is more than we ask\n                if (length > filesLength) {\n                    filesLength++;\n                } else {\n                    toUploadLength--;\n                }\n                sizeErrors.push(cutFileName(file.name, ext, 15));//register a size error\n            } else if (this.options.allowDuplicates || $.inArray(file.name, this.imgNames) === -1) {// if the file is not already in the list\n                $uploadBtn.prop(\"disabled\", false);\n                setupReader(file);\n                this.pending++; // we have one more file that is pending to be uploaded\n                this.currentListLength++;// we have one more file in the list\n            } else {\n                if (length > filesLength) {\n                    filesLength++;\n                } else {\n                    toUploadLength--;\n                }\n            }\n        }\n        var extErrorsLength = extErrors.length, sizeErrorsLength = sizeErrors.length;\n        if (extErrorsLength + sizeErrorsLength > 0) { // in the end expose all errors\n            if (extErrorsLength > 0) {\n                errorMessage = this.language.extError.replaceText(extErrors.toString().replace(/,/g, ', '));\n            }\n            if (sizeErrorsLength > 0) {\n                errorMessage += this.language.sizeError.replaceText(sizeErrors.toString().replace(/,/g, ', '), this.options.maxFileSize + 'mb');\n            }\n            this.options.errorHandler.method(errorMessage, this.options.errorHandler.error);\n        }\n        function setupReader() {\n            var index = thisS.imgNames.length;\n            if (index === 0) {//do it only the first time\n                if (thisS.options.preview) {\n                    if (!thisS.options.dropZone) {\n                        $uploadBox.addClass('ssi-uploadNoDropZone')\n                    }\n                }\n                $uploadBtn.removeClass('ssi-hidden');\n                $clearBtn.removeClass('ssi-hidden');\n            }\n            $clearBtn.prop('disabled', true);\n            thisS.toUpload[index] = file;\n            var filename = file.name;\n            var ext = filename.getExtension(); //get file's extension\n            thisS.imgNames[index] = filename; //register file's name\n            if (thisS.options.preview) {\n                var getTemplate = function (content) {\n                    return '<table class=\"ssi-imgToUploadTable ssi-pending\">' +\n                        '<tr><td class=\"ssi-upImgTd\">' + content + '</td></tr>' +\n                        '<tr><td><div id=\"ssi-uploadProgress' + index + '\" class=\"ssi-hidden ssi-uploadProgress\"></div></td></tr>' +\n                        '<tr><td><button data-delete=\"' + index + '\" class=\" ssi-button error ssi-removeBtn\"><span class=\"trash10 trash\"></span></button></td></tr>' +\n                        '<tr><td>' + cutFileName(filename, ext, 15) + '</td></tr></table>'\n                };\n                var fileType = file.type.split('/');\n                if (fileType[0] == 'image') {\n                    $uploadBtn.prop(\"disabled\", true);\n                    $clearBtn.prop(\"disabled\", true);\n                    var fileReader = new FileReader();\n                    fileReader.onload = function () {\n                        imgContent += getTemplate('<img class=\"ssi-imgToUpload\" src=\"\"/><i class=\"fa-spin fa fa-spinner fa-pulse\"></i>'); // set the files element without the img\n                        imgs[index] = fileReader.result;\n                        j++;\n                        if (toUploadLength === j) {// if all elements are in place lets load images\n                            thisS.$element.find('#ssi-fileNumber').removeClass('ssi-hidden');\n                            $uploadBox.append(imgContent);\n                            setTimeout(function () {\n                                setImg();//and load the images\n                                $uploadBtn.prop(\"disabled\", false);\n                                $clearBtn.prop(\"disabled\", false);\n                            }, 10);\n                            $uploadBtn.prop(\"disabled\", false);\n                            $clearBtn.prop(\"disabled\", false);\n\n                            imgContent = '';\n                            toUploadLength = [];\n                        } else if (toUploadLength / 2 == Math.round(j)) {\n                            $uploadBox.append(imgContent);\n                            setImg();//and load the images\n                            imgContent = '';\n                        }\n                    };\n                    fileReader.readAsDataURL(file);\n                } else {\n                    imgs[index] = null;\n                    $uploadBox.append(getTemplate('<div class=\"document-item\" href=\"test.mov\" filetype=\"' + ext + '\"><span class = \"fileCorner\"></span></div>'));\n                    j++;\n                }\n            } else {\n                $clearBtn.prop('disabled', false);\n                thisS.$element.find('.ssi-namePreview').html((index === 0 ? cutFileName(filename, ext, 13) : (thisS.currentListLength + 1) + ' ' + thisS.language.files));//set name preview\n                $fileList.append('<tr class=\"ssi-space\"><td></td></tr>' +//append files element to dom\n                    '<tr class=\"ssi-toUploadTr ssi-pending\"><td><div id=\"ssi-uploadProgress' + index + '\" class=\"ssi-hidden ssi-uploadProgress ssi-uploadProgressNoPre\"></div>' +\n                    '<span>' + cutFileName(filename, ext, 20) + '</span></td>' +\n                    '<td><a data-delete=\"' + index + '\" class=\"ssi-button ssi-removeBtn  ssi-removeBtnNP\"><span class=\"trash7 trash\"></span></a></td></tr>');\n            }\n\n            var setImg = function () {//load the images\n                for (var i = 0; i < imgs.length; i++) {\n                    if (imgs[i] !== null) {\n                        $uploadBox.find(\"#ssi-uploadProgress\" + i).parents('table.ssi-imgToUploadTable')\n                            .find('.ssi-imgToUpload')\n                            .attr('src', imgs[i]) //set src of the image\n                            .next().remove();//remove the spinner\n                        imgs[i] = null;\n                    }\n                }\n                imgs = [];\n            };\n        }\n    };\n    var clearCompleted = function (thisS) {//clear all completed files\n        var $completed = thisS.$element.find('.ssi-completed');\n        thisS.successfulUpload = 0;\n        thisS.aborted = 0;\n        thisS.abortedWithError = 0;\n        if (!thisS.options.preview) $completed.prev('tr').remove();\n        $completed.remove();\n    };\n    var clearPending = function (thisS) {//clear all pending files\n        var $pending = thisS.$element.find('.ssi-pending');\n        var length = thisS.imgNames.length;\n        for (var i = 0; i < length; i++) {\n            if (thisS.imgNames[i] === null) {\n                thisS.toUpload.splice(i, 1);\n                thisS.imgNames.splice(i, 1);\n            }\n        }\n        thisS.toUpload.splice(-thisS.pending, thisS.pending);\n        thisS.imgNames.splice(-thisS.pending, thisS.pending);\n        thisS.pending = 0;\n        if (!thisS.options.preview) $pending.prev('tr').remove();\n        $pending.remove();\n    };\n\n    Ssi_upload.prototype.clear = function (action) {//clean the list of all non in progress files\n        switch (action) {\n            case 'pending':\n                clearPending(this);\n                break;\n            case 'completed':\n                clearCompleted(this);\n                break;\n            default:\n                clearPending(this);\n                clearCompleted(this);\n        }\n        var $uploadBtn = this.$element.find('#ssi-uploadBtn'),\n            $clearBtn = this.$element.find('#ssi-clearBtn');\n        this.currentListLength = getCurrentListLength(this);\n        if (this.inProgress === 0) { //if no file are uploading right now\n            this.totalProgress = [];\n        }\n        if ((this.currentListLength === 0)) { // if no items in the list\n            $clearBtn.addClass('ssi-hidden');\n            $uploadBtn.addClass('ssi-hidden');\n            this.$element.find('#ssi-fileNumber').addClass('ssi-hidden');\n            this.totalFilesLength = 0;\n            if (!this.options.dropZone) {\n                this.$element.find('.ssi-uploadBox').removeClass('ssi-uploadNoDropZone')\n            }\n        }\n        $clearBtn.prop('disabled', true);\n        $uploadBtn.prop('disabled', true);\n\n        if (!this.options.preview) {\n            setNamePreview(this);\n        }\n    };\n\n    var setNamePreview = function (thisS) {//set the name preview according to the remaining elements in the list\n        if (thisS.currentListLength > 1) {//if more than one element left\n            thisS.$element.find('.ssi-namePreview').html(thisS.currentListLength + ' files'); // set the name preview to the length of the remaining items\n        } else if (thisS.currentListLength === 1) {//if one left\n            setLastElementName(thisS); // set the name of the element\n        } else { //if no elements left\n            thisS.$element.find('.ssi-uploadDetails').removeClass('ssi-uploadBoxOpened');\n            thisS.$element.find('#ssi-fileList').empty();//empty list\n            thisS.$element.find('.ssi-namePreview').empty();//empty the name preview\n        }\n\n    };\n\n    Ssi_upload.prototype.appendFileToFormData = function (file) {\n        var formData = new FormData();//set the form data\n\n        formData.append(this.inputName, file);//append the first file to the form data\n        $.each(this.options.data, function (key, value) {// append all extra data\n            formData.append(key, value);\n        });\n        return formData;\n    }\n\n\n    Ssi_upload.prototype.tryToTransform = function (file, callback) {\n        if (typeof this.options.transformFile === 'function') {\n            try {\n                file = this.options.transformFile(file);// execute the transformFile\n                if (file instanceof Promise) {\n                    file.then(function (newFile) {\n                        callback(newFile)\n                    })\n                } else {\n                    callback(file)\n                }\n            } catch (err) {\n                if (!this.options.ignoreCallbackErrors) {\n                    console.error('There is an error in transformFile');\n                    return console.error(err);\n                }\n            }\n        } else {\n            callback(file)\n        }\n    }\n    Ssi_upload.prototype.uploadFiles = function () {// upload the pending files\n        if (this.pending > 0) {\n            if (typeof this.options.beforeUpload === 'function') {\n                try {\n                    this.options.beforeUpload();// execute the beforeUpload callback\n                } catch (err) {\n                    if (!this.options.ignoreCallbackErrors) {\n                        console.log('There is an error in beforeUpload callback');\n                        return console.log(err);\n                    }\n                }\n            }\n            this.$element.find('#ssi-abortBtn').removeClass('ssi-hidden');\n            this.$element.find('.ssi-removeBtn')\n                .addClass('ssi-abortUpload')\n                .removeClass('ssi-removeBtn')\n                .children('span').removeClass('trash7 trash10 trash')\n                .addClass((this.options.preview ? 'ban7w' : 'ban7'));//transform remove button to abort button\n            var $uploadBtn = this.$element.find('#ssi-uploadBtn'),\n                $clearBtn = this.$element.find('#ssi-clearBtn');\n            $uploadBtn.prop(\"disabled\", true);\n            var thisS = this,\n                i = this.totalFilesLength;\n            if (this.totalFilesLength !== 0 && !this.options.preview) {\n                setNamePreview(this);\n            }\n            this.inProgress += this.pending;// add pending to in progress\n            this.totalFilesLength += this.pending;// this variable is to prevent id duplication during uploads\n            this.pending = 0;\n            if (this.inProgress === this.currentListLength) {// disable the clear button if no items in list we can be remove\n                $clearBtn.prop(\"disabled\", true);\n            }\n\n            while (!thisS.toUpload[i]) { // do it until you find a file\n                i++;\n            }\n            var file = thisS.toUpload[i]\n            thisS.tryToTransform(file, function (newFile) {\n                var formData = thisS.appendFileToFormData(newFile)\n                ajaxLoopRequest(formData, i)\n            })\n        }\n        //--------------start of ajax request-----------------------\n        function ajaxLoopRequest(formData, ii) {\n            var selector = 'table.ssi-imgToUploadTable';\n            if (!thisS.options.preview) {\n                selector = 'tr.ssi-toUploadTr'\n            }\n            var uploadBar = thisS.$element.find('#ssi-uploadProgress' + ii);//get the file's  progress bar\n            uploadBar.removeClass('ssi-hidden') //make it visible\n                .parents(selector).removeClass('ssi-pending');\n            var ajaxOptions = $.extend({}, {//store the request to the uploadList variable\n                xhr: function () {\n                    var xhr = new window.XMLHttpRequest();\n                    xhr.upload.addEventListener('progress', function (e) {// add event listener to progress\n                        if (e.lengthComputable) {\n                            var percentComplete = (e.loaded / e.total) * 100;// calculate the progress\n                            if (uploadBar) {\n                                uploadBar.css({\n                                    width: percentComplete + '%'//update the progress bar width according to the progress\n                                });\n                            }\n                            thisS.totalProgress[ii] = percentComplete;//store the progress to the array\n                            var sum = arraySum(thisS.totalProgress) / (thisS.inProgress + thisS.successfulUpload);//and calculate the overall progress\n                            if (!thisS.options.preview) {\n                                thisS.$element.find('#ssi-uploadProgressNoPreview')\n                                    .removeClass('ssi-hidden')\n                                    .css({\n                                        width: sum + '%'\n                                    });\n                            }\n                            $uploadBtn.find('#ssi-up_loading').html(Math.ceil(sum) + '%');// add to upload button the current overall progress percent number\n                        }\n                    }, false);\n                    return xhr;\n                },\n                async: true,\n                beforeSend: function (xhr, settings) {\n                    thisS.uploadList[ii] = xhr;\n                    console.log(\"TCL: ajaxLoopRequest -> thisS.toUpload\", thisS.toUpload)\n                    console.log(\"TCL: ajaxLoopRequest -> ii\", ii)\n                    $uploadBtn.find('#ssi-up_loading') //add spiner to uploadbutton\n                        .html('<i class=\"fa fa-spinner fa-pulse\"></i>');\n                    var fileInfo = {\n                        name: thisS.toUpload[ii].name,//send some info of the file\n                        type: thisS.toUpload[ii].type,\n                        size: (thisS.toUpload[ii].size / 1024).toFixed(2)\n                    };\n                    if (typeof thisS.options.beforeEachUpload === 'function') {\n                        try {\n                            // execute the beforeEachUpload callback and save the returned value\n                            var msg = thisS.options.beforeEachUpload(fileInfo, xhr, settings);\n                        } catch (err) {\n                            if (err.name == 'Error') {\n                                thisS.abort(ii, undefined, err.message);//call the abort function\n                            } else {\n                                if (!thisS.options.ignoreCallbackErrors) {\n                                    console.log('There is an error in beforeEachUpload callback. Filename:' + thisS.toUpload[ii].name);\n                                    console.log(err);\n                                    thisS.abort(ii, undefined, thisS.language.wentWrong);//call the abort function\n                                }\n                            }\n                            return;\n                        }\n                    }\n                    thisS.$element.find('input.ssi-uploadInput').trigger('beforeEachUpload.ssi-uploader', [fileInfo]);\n                    if (xhr.status === 0) {\n                        if (xhr.statusText === 'canceled') {//if user used beforeEachUpload to abort the request\n                            if (typeof msg === 'undefined') {//if no message\n                                msg = false; //because user have already aborted the request set to false or anything else except undefined to prevent to abort it again\n                            }\n                            thisS.abortedWithError++;// we have one error more\n                            thisS.abort(ii, msg);//call the abort function\n                        }\n                    }\n                },\n                type: 'POST',\n                method: 'POST',\n                data: formData,\n                cache: false,\n                contentType: false,\n                processData: false,\n                url: thisS.options.url,\n                error: function (request, error) {\n                    if (error !== 'abort') {\n                        uploadBar.addClass('ssi-canceledProgressBar');\n                        var msg = thisS.language.error;\n                        thisS.abortedWithError++;//add one more error\n                        thisS.totalProgress.splice(ii, 1); //remove from progress array\n                        if (!thisS.options.preview) {\n                            msg = '<span class=\"exclamation7\"></span>';\n                        }\n                        setElementMessage(thisS, ii, 'error', msg, thisS.language.serverError);\n                        thisS.totalProgress[ii] = '';\n                        thisS.inProgress--;\n                        $clearBtn.prop(\"disabled\", false);\n                        if (typeof thisS.options.onEachUpload === 'function') {//execute the onEachUpload callback\n                            try {\n                                thisS.options.onEachUpload({//and return some info\n                                    uploadStatus: 'error',\n                                    responseMsg: thisS.language.serverError,\n                                    name: thisS.toUpload[ii].name,\n                                    size: (thisS.toUpload[ii].size / 1024).toFixed(2),\n                                    type: thisS.toUpload[ii].type\n                                });\n                            } catch (err) {\n                                if (!thisS.options.ignoreCallbackErrors) {\n                                    console.log('There is an error in onEachUpload callback. File name:' + thisS.toUpload[ii].name);\n                                    console.log(err);\n                                }\n                            }\n                        }\n                        if (getCompleteStatus(thisS)) {//if no more elements in progress\n                            finishUpload(thisS);\n                        }\n                        console.log(arguments);//log the error\n                        console.log(\" Ajax error: \" + error);\n                    }\n                }\n            }, thisS.options.ajaxOptions);\n            $.ajax(ajaxOptions).done(function (responseData, textStatus, jqXHR) {\n                var msg, title = '', dataType = 'error', spanClass = 'exclamation', data;\n                try {\n                    data = $.parseJSON(responseData);\n                } catch (err) {\n                    data = responseData;\n                }\n                if (thisS.options.responseValidation) {\n                    var valData = thisS.options.responseValidation;\n                    if (typeof valData.validationKey === 'object' && valData.resultKey == 'validationKey') {\n                        if (data.hasOwnProperty(valData.validationKey.success)) {\n                            cb(true, data[valData.validationKey.success]);\n                        } else {\n                            cb(false, data[valData.validationKey.error]);\n                        }\n                    } else {\n                        if (data[valData.validationKey] == valData.success) {\n                            cb(true, data[valData.resultKey]);\n                        } else {\n                            cb(false, data[valData.resultKey]);\n                        }\n                    }\n                } else {\n                    if (jqXHR.status == 200) {\n                        cb(true, data);\n                    } else {\n                        cb(false, data);\n                    }\n                }\n                function cb(result, data) {\n                    if (result) {//if response type is success\n                        dataType = 'success';\n                        msg = thisS.language.success;\n                        spanClass = 'check';\n                        thisS.successfulUpload++;// one more successful upload\n                    } else {\n                        uploadBar.addClass('ssi-canceledProgressBar');\n                        if (thisS.options.preview) {\n                            msg = thisS.language.error;\n                        }\n                        thisS.abortedWithError++;\n                    }\n                    title = data;\n                }\n\n                if (!thisS.options.preview) {\n                    msg = '<span class=\"' + spanClass + '7\"></span>';\n                }\n                setElementMessage(thisS, ii, dataType, msg, title);\n                var fileInfo = {//and return some info\n                    uploadStatus: dataType,\n                    responseMsg: title,\n                    name: thisS.toUpload[ii].name,\n                    size: (thisS.toUpload[ii].size / 1024).toFixed(2),\n                    type: thisS.toUpload[ii].type\n                };\n                if (typeof thisS.options.onEachUpload === 'function') {//execute the onEachUpload callback\n                    try {\n                        thisS.options.onEachUpload(fileInfo, data);\n                    } catch (err) {\n                        console.log('There is an error in onEachUpload callback');\n                        console.log(err);\n                    }\n                }\n                thisS.$element.find('input.ssi-uploadInput').trigger('onEachUpload.ssi-uploader', [fileInfo]);\n                thisS.inProgress--;//one less in progress upload\n                $clearBtn.prop(\"disabled\", false);\n                if (getCompleteStatus(thisS)) {//if no more files in progress\n                    finishUpload(thisS);\n                }\n                // thisS.totalProgress[ii]='';\n                thisS.uploadList[ii] = '';\n                thisS.toUpload[ii] = '';\n                thisS.imgNames[ii] = '';\n            });\n            //--------------end of ajax request-----------------------\n\n            i = ii;\n            i++;//go to the next element\n            while (!thisS.toUpload[i] && typeof thisS.toUpload[i] !== 'undefined') {// do it until you find a file\n                i++;\n            }\n            if (i < thisS.toUpload.length) {// if more files exist start the next request\n                const nextFile = thisS.toUpload[i]\n                thisS.tryToTransform(nextFile, function (newFile) {\n                    var formData = thisS.appendFileToFormData(newFile)\n                    ajaxLoopRequest(formData, i)\n                })\n            }\n        }\n    };\n    var setElementMessage = function (thisS, index, msgType, msg, title) {\n        var className = '', elementSelector = 'table.ssi-imgToUploadTable', element;\n        if (!thisS.options.preview) {\n            className = 'ssi-noPreviewSubMessage';\n            elementSelector = 'tr.ssi-toUploadTr';\n            if (thisS.currentListLength === 1) {\n                thisS.errors = title;\n            }\n        }\n\n        element = thisS.$element.find(\".ssi-abortUpload[data-delete='\" + index + \"']\");\n        element.parents(elementSelector).addClass('ssi-completed');\n        element.after(getResultMessage(msgType, msg, title, className))\n            .remove();\n    };\n\n    var getCompleteStatus = function (thisS) {//check if file are in progress\n        return (thisS.inProgress === 0);\n    };\n\n    var getResultMessage = function (type, msg, title, classes) {//return a message label\n        return '<span class=\"ssi-statusLabel ' + classes + ' ' + type + '\" data-status=\"' + title + '\">' + msg + '</span>';\n    };\n\n    var getCurrentListLength = function (thisS) { //get the list length\n        return (thisS.inProgress + thisS.successfulUpload + thisS.aborted + thisS.abortedWithError + thisS.pending);\n    };\n    var setLastElementName = function (thisS) { //if one file in list get the last file's name and put it to the name preview\n        var fileName = thisS.$element.find('#ssi-fileList').find('span').html();//find the only span left\n        var ext = fileName.getExtension();//get the extension\n        thisS.$element.find('.ssi-uploadDetails').removeClass('ssi-uploadBoxOpened');\n        thisS.$element.find('.ssi-namePreview').html(cutFileName(fileName, ext, 15));//short the name and put it to the name preview\n    };\n    Ssi_upload.prototype.abort = function (index, title, mmsg) {//abort a request\n        if (typeof title === 'undefined') {//if no title\n            this.uploadList[index].abort();// abort the element\n            this.totalProgress[index] = '';\n            title = mmsg || 'Aborted';\n            this.aborted++;// one more aborted file\n        } else if (typeof title !== 'string') {//if not string that means that the request aborted with the beforeEachUpload callback and no message returned\n            title = '';\n        }\n        //nothing of the above happened that means the user aborted the request with the beforeUpload callback and returned a message\n        var msg = this.language.aborted;\n        if (!this.options.preview) {\n            msg = '<span class=\"ban7w\"></span>';\n        }\n        setElementMessage(this, index, 'error', msg, (title));\n        this.$element.find('#ssi-uploadProgress' + index).removeClass('ssi-hidden').addClass('ssi-canceledProgressBar');\n        this.toUpload[index] = undefined;\n        this.uploadList[index] = undefined;\n        this.imgNames[index] = undefined;\n        this.$element.find('#ssi-clearBtn').prop(\"disabled\", false);\n        this.inProgress--;//one less in progress file\n        if (getCompleteStatus(this)) {//if no more file in progress\n            finishUpload(this);\n        }\n\n    };\n\n    var finishUpload = function (thisS) {//when every uplaod ends\n        thisS.$element.find('#ssi-abortBtn').addClass('ssi-hidden');\n        if (!thisS.options.preview) {//display tha main message in the name preview\n            var type = 'error', title = '', msg = '';\n            if (thisS.abortedWithError > 0) { //if no errors\n                if (thisS.totalFilesLength === 1) {// if only one file in the list\n                    title = thisS.errors; //display the error\n                } else {//else display something more general message\n                    title = thisS.language.someErrorsOccurred\n                }\n                msg = '<span class=\"exclamation23\"></span>';\n            } else if (thisS.aborted > 0 && thisS.successfulUpload === 0) {//if all request aborted\n                msg = '<span class=\"ban23\"></span>';\n                title = thisS.language.aborted;\n            } else if (thisS.successfulUpload > 0) {// all request were successfull\n                type = 'success';\n                msg = '<span class=\"check23\"></span>';\n                title = thisS.language.sucUpload;\n            }\n            thisS.$element.find('.ssi-namePreview').append(getResultMessage(type, msg, title, 'ssi-noPreviewMessage'));//show the message in the name preview\n            thisS.$element.find('#ssi-uploadProgressNoPreview') //remove main overall progress bar\n                .removeAttr('styles')\n                .addClass('ssi-hidden');\n        }\n        if (typeof thisS.options.onUpload === 'function') {\n            try {\n                thisS.options.onUpload(type);//execute the on Upload callback\n            } catch (err) {\n                if (!thisS.options.ignoreCallbackErrors) {\n                    console.log('There is an error in onUpload callback');\n                    console.log(err);\n                }\n            }\n        }\n        thisS.$element.find('input.ssi-uploadInput').trigger('onUpload.ssi-uploader', [type]);\n        var $uploadBtn = thisS.$element.find('#ssi-uploadBtn');\n        thisS.$element.find('#ssi-clearBtn').prop(\"disabled\", false);\n        $uploadBtn.prop(\"disabled\", false)\n            .find('#ssi-up_loading')\n            .empty();\n        if (thisS.pending === 0) {\n            $uploadBtn.addClass('ssi-hidden');\n            thisS.toUpload = [];\n            thisS.imgNames = [];\n            thisS.totalFilesLength = 0;\n        }\n        thisS.uploadList = [];\n        thisS.totalProgress = [];\n        thisS.currentListLength = getCurrentListLength(thisS);\n        thisS.inProgress = 0;\n    };\n\n    $.fn.ssi_uploader = function (opts) {\n        var defaults = {\n            allowDuplicates: false,\n            url: '',\n            data: {},\n            locale: 'en',\n            preview: true,\n            dropZone: true,\n            maxNumberOfFiles: '',\n            responseValidation: false,\n            ignoreCallbackErrors: false,\n            maxFileSize: 2,\n            inForm: false,\n            ajaxOptions: {},\n            onUpload: function () {\n            },\n            onEachUpload: function () {\n            },\n            beforeUpload: function () {\n            },\n            beforeEachUpload: function () {\n            },\n            allowed: '',\n            errorHandler: {\n                method: function (msg) {\n                    alert(msg);\n                },\n                success: 'success',\n                error: 'error'\n            }\n        };\n        var options = $.extend(true, defaults, opts);\n        options.allowed = options.allowed || ['jpg', 'jpeg', 'png', 'bmp', 'gif'];\n        return this.each(function () {\n            var $element = $(this);\n            if ($element.is('input[type=\"file\"]')) {\n                if ($element.data('ssi_upload')) return;\n                var ssi_upload = new Ssi_upload(this, options);\n                $element.data('ssi_upload', ssi_upload);\n            } else {\n                console.log('The targeted element is not file input.')\n            }\n        });\n    };\n    //functions\n    String.prototype.replaceText = function () {//replace $ with variables\n        var args = Array.apply(null, arguments);\n        var text = this;\n        for (var i = 0; i < args.length; i++) {\n            text = text.replace('$' + (i + 1), args[i])\n        }\n        return text;\n    };\n    String.prototype.getExtension = function () {//returns the extension of a path or file\n        return this.split('.').pop().toLowerCase();\n    };\n    var cutFileName = function (word, ext, maxLength) {//shorten the name\n        if (typeof ext === 'undefined') ext = '';\n        if (typeof maxLength === 'undefined') maxLength = 10;\n        var min = 4;\n        if (maxLength < min) return;\n        var extLength = ext.length;\n        var wordLength = word.length;\n        if ((wordLength - 2) > maxLength) {\n            word = word.substring(0, maxLength);\n            var wl = word.length - extLength;\n            word = word.substring(0, wl);\n            return word + '...' + ext;\n        } else return word;\n    };\n\n    var arraySum = function (arr) {//return the sum of an array\n        var sum = 0;\n        for (var i = 0; i < arr.length; i++) {\n            if (typeof arr[i] === 'number')\n                sum += arr[i];\n        }\n        return sum;\n    };\n\n    var locale = {\n        en: {\n            success: 'Success',\n            sucUpload: 'Successful upload',\n            chooseFiles: 'Choose files',\n            uploadFailed: 'Upload failed',\n            serverError: 'Internal server error',\n            error: 'Error',\n            abort: 'Abort',\n            aborted: 'Aborted',\n            files: 'files',\n            upload: 'Upload',\n            clear: 'Clear',\n            drag: 'Drag n Drop',\n            sizeError: '$1 exceed the size limit of $2',// $1=file name ,$2=max ie( example.jpg has has exceed the size limit of 2mb)\n            extError: '$1 file types are not supported',//$1=file extension ie(exe files are not supported)\n            someErrorsOccurred: 'Some errors occurred!',\n            wentWrong: 'Something went wrong!',\n            pending: 'Pending',\n            completed: 'Completed',\n            inProgress: 'In progress'\n        },\n        gr: {\n            success: 'Επιτυχία',\n            sucUpload: 'Επιτυχής μεταφόρτωση',\n            chooseFiles: 'Επιλέξτε αρχεία',\n            uploadFailed: 'Η μεταφόρτωση απέτυχε!',\n            serverError: 'Εσωτερικό σφάλμα διακομιστή!',\n            error: 'Σφάλμα',\n            abort: 'Διακοπή',\n            aborted: 'Διακόπηκε',\n            files: 'αρχεία',\n            upload: 'Μεταφόρτωση',\n            clear: 'Εκκαθάριση',\n            drag: 'Συρετε εδώ...',\n            sizeError: '$1 έχει ξεπεράσει το όριο των $2.',// $1=file name ,$2=max file size ie( example.jpg has has exceed the size limit of 2mb)\n            extError: '$1 αρχεία δεν υποστηρίζονται.',// $1=file extension ie(exe files are not supported)\n            someErrorsOccurred: 'Σημειώθηκαν ορισμένα λάθη!',\n            wentWrong: 'Κάτι πήγε στραβά!',\n            pending: 'Σε εκκρεμότητα',\n            completed: 'Ολοκληρομένα',\n            inProgress: 'Σε εξέλιξη'\n        },\n        fr: { //@author Badulesia\n            success: 'Succès',\n            sucUpload: 'Envoi réussi',\n            chooseFiles: 'Choisissez fichiers',\n            uploadFailed: 'Envoi échoué',\n            serverError: 'Erreur interne du serveur',\n            error: 'Erreur',\n            abort: 'Annuler',\n            aborted: 'Annulé',\n            files: 'Fichiers',\n            upload: 'Envoyer',\n            clear: 'Effacer',\n            drag: 'Glisser déposer',\n            sizeError: '$1 excède la taille limite de $2',// $1=file name ,$2=max ie( example.jpg has has exceed the size limit of 2mb)\n            extError: 'Types de fichier $1 non autorisé',//$1=file extension ie(exe files are not supported)\n            someErrorsOccurred: 'Une erreur a eu lieu !',\n            wentWrong: 'Une erreur a eu lieu !',\n            pending: 'Εn attendant',\n            completed: 'Terminé',\n            inProgress: 'En cours'\n        },\n        zh_CN: {\n            success: '上传成功',\n            sucUpload: '上传成功',\n            chooseFiles: '选择文件',\n            uploadFailed: '上传失败',\n            serverError: '服务器内部错误',\n            error: '错误',\n            abort: '中止',\n            aborted: '已中止',\n            files: '文件',\n            upload: '上传',\n            clear: '清空',\n            drag: '将图片拖拽至此并释放',\n            sizeError: '$1 超出了 $2 的大小限制',\n            extError: '$1 类型不被支持',\n            someErrorsOccurred: '发生了一些错误!',\n            wentWrong: '出问题了哦!',\n            pending: '等待上传',\n            completed: '完成',\n            inProgress: '正在上传'\n        }\n    };\n\n}));"],"file":"ssi-uploader.min.js"}